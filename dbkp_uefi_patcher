#!/bin/sh
#
# Copyright (C) 2025-26 https://github.com/ArKT-7/nabu-uefi-autopatcher
#
# Made for easy UEFI dual boot kernel patching to enable dualbooting on using magnetic cover/case or Volume buttons using a single command, for booting Windows on the Xiaomi Pad 5 (Nabu).
#

# Define URLs and target paths
BASE_URL="https://raw.githubusercontent.com/arkt-7/nabu-uefi-autopatcher/main"
URL_BUSYBOX="$BASE_URL/bin/busybox"
URL_MAGISK_BOOT="$BASE_URL/bin/magiskboot"
URL_KP="$BASE_URL/bin/DualBootKernelPatcher"
URL_DBKP_CFG="$BASE_URL/bin/aloha/DualBoot.Sm8150.cfg"
URL_SHELLCODE="$BASE_URL/bin/aloha/ShellCode.Nabu.bin"
URL_SHELLCODE2="$BASE_URL/bin/aloha/ShellCode.Nabu2.bin"

BASE_URL_MAGNETIC="$BASE_URL/bin/aloha/fd-files/magnetic"
BASE_URL_VOLBUTTON="$BASE_URL/bin/aloha/fd-files/vol-button"
UEFI_ALOHA_SB="aloha_EFI_SB.fd"
UEFI_W11_WHITE_SB="Win11-White_EFI_SB.fd"
UEFI_W11_GRADIENT_SB="win11-gradient_EFI_SB.fd"
UEFI_NYANKO_SENSEI_SB="Nyanko-Sensei_EFI_SB.fd"
UEFI_SIRTORIUS_M_SB="SirTorius-M_EFI_SB.fd"
UEFI_JADEKUBPOM_SB="JadeKubPom_EFI_SB.fd"
UEFI_CAMBODIA_PORL_SB="Cambodia-porl_EFI_SB.fd"
UEFI_XIAOMI_SB="xiaomi_EFI_SB.fd"
UEFI_MI_WHITE_SB="MI-White_EFI_SB.fd"
UEFI_MI_ORANGE_SB="MI-Orange_EFI_SB.fd"
UEFI_WINDROID_SB="WinDroid_EFI_SB.fd"
UEFI_CHARA_SB="Chara-Dreemurr_EFI_SB.fd"

TARGET_DIR="/dev/tmp/uefi-install"
TARGET_BUSYBOX="$TARGET_DIR/busybox"
TARGET_MAGISK_BOOT="$TARGET_DIR/magiskboot"
TARGET_DBKP_CFG="$TARGET_DIR/DualBoot.Sm8150.cfg"
TARGET_SHELLCODE="$TARGET_DIR/ShellCode.Nabu.bin"
TARGET_SHELLCODE2="$TARGET_DIR/ShellCode.Nabu2.bin"
TARGET_KP="$TARGET_DIR/DualBootKernelPatcher"
TARGET_UEFI="$TARGET_DIR/uefi.fd"
TARGET_BOOT="/dev/block/platform/soc/1d84000.ufshc/by-name/boot$(getprop ro.boot.slot_suffix)"

log() {
    echo ""
    echo "[$(date +"%H:%M:%S")] $1"
}

DEVICE_CODENAME=$(getprop ro.product.device)

# Function to download and set permissions
download_and_set_permissions() {
    local url=$1 dest_file=$2
    log "[INFO] Downloading $(basename "$dest_file")..."
    curl -L -# -o "$dest_file" "$url" || { log "[ERROR] Failed to download $(basename "$dest_file")"; exit 1; }
    chmod 755 "$dest_file"
    echo "[SUCCESS] $(basename "$dest_file") ready."
}

# Function to download files without setting permissions
download_file() {
    local url=$1 dest_file=$2
    #echo "[INFO] Downloading $(basename "$dest_file")..."
    curl -L -# -o "$dest_file" "$url" || { log "[ERROR] Failed to download $(basename "$dest_file")"; }
    echo "[SUCCESS] $(basename "$dest_file") downloaded."
}

# Function to extract checksum from file
get_checksum() {
    grep "^$1=" "$CHECKSUM_FILE" | cut -d'=' -f2
}

# Function to verify checksum
verify_checksum() {
    local file="$1"
    local expected_checksum="$2"

    if [ -z "$expected_checksum" ]; then
        echo "[WARNING] No checksum found for $(basename "$file"), can't proceed without verification!\n"
        return 1
    fi

    local actual_checksum
    actual_checksum=$($TARGET_BUSYBOX sha256sum "$file" | awk '{print $1}')

    if [ "$actual_checksum" = "$expected_checksum" ]; then
        #echo "[SUCCESS] Checksum verified for $(basename "$file")."
        return 0
    else
        echo "\n[ERROR] Checksum mismatch for $(basename "$file")! Expected: $expected_checksum, Got: $actual_checksum"
        return 1
    fi
}

# Function to attempt download with checksum validation
download_uefi() {
    if [ "$DBKP_METHOD" -eq 0 ]; then
        log "[INFO] Proceeding with Magnetic case Dualboot method!" 
        PRIMARY_URL="$BASE_URL_MAGNETIC/$1"
        FILE_KEY="MAG_$1"
    else
        log "[INFO] Proceeding with Volume Button Dualboot method!" 
        rm -f "$TARGET_SHELLCODE"
        mv "$TARGET_SHELLCODE2" "$TARGET_SHELLCODE"
        PRIMARY_URL="$BASE_URL_VOLBUTTON/$1"
        FILE_KEY="VOL_$1"
    fi

    FALLBACK_URL="$PRIMARY_URL"
    DEST_FILE="$TARGET_UEFI"

    log "[INFO] Downloading: $(basename "$DEST_FILE")"

    EXPECTED_CHECKSUM=$(get_checksum "$FILE_KEY")

    if download_file "$PRIMARY_URL" "$DEST_FILE"; then
        if verify_checksum "$DEST_FILE" "$EXPECTED_CHECKSUM"; then
            return 0  # Download successful with valid checksum
        else
            echo "[WARNING] Checksum mismatch, trying fallback...\n"
            rm -f "$DEST_FILE"
        fi
    else
        echo "[WARNING] Primary download failed, trying fallback...\n"
    fi

    # Try downloading from fallback source
    if download_file "$FALLBACK_URL" "$DEST_FILE"; then
        if verify_checksum "$DEST_FILE" "$EXPECTED_CHECKSUM"; then
            return 0  # Fallback successful with valid checksum
        else
            echo "[ERROR] Fallback checksum mismatch! can't proceed...\n"
            exit 1
        fi
    else
        echo "[ERROR] Failed to download $(basename "$DEST_FILE") from both sources! can't proceed..."
        exit 1
    fi
}

log "[INFO] Dual Boot Kernel Patcher for Windows UEFI for Xiaomi Pad 5 ($DEVICE_CODENAME)"
log "[INFO] This script is Written and Made By ArKT / °⊥⋊ɹ∀°, Telegram - '@ArKT_7', Github - 'ArKT-7'"

# Check device compatibility
if [ "$DEVICE_CODENAME" != "nabu" ]; then
    log "[ERROR] Unsupported device: $DEVICE_CODENAME"
    exit 1
fi

log "[INFO] Dual Boot Kernel Patcher with Magnetic case or Volume buttons for Windows UEFI for ($DEVICE_CODENAME)\n"

mkdir -p "$TARGET_DIR"
cd "$TARGET_DIR"

# Download required binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"
download_and_set_permissions "$URL_MAGISK_BOOT" "$TARGET_MAGISK_BOOT"
download_and_set_permissions "$URL_DBKP_CFG" "$TARGET_DBKP_CFG"
download_and_set_permissions "$URL_SHELLCODE" "$TARGET_SHELLCODE"
download_and_set_permissions "$URL_SHELLCODE2" "$TARGET_SHELLCODE2"
download_and_set_permissions "$URL_KP" "$TARGET_KP"
# URL to the checksum file
CHECKSUM_FILE="$TARGET_DIR/checksum.arkt"
DBKP_METHOD=0 # set Magnetic case method as default

# Download checksum file
#echo "[INFO] Downloading checksum file..."
if ! download_file "$BASE_URL/bin/checksum.arkt" "$CHECKSUM_FILE"; then
    log "[ERROR] Failed to download checksum file, can't proceed without it!\n"
    exit 1
elif ! grep -q "=" "$CHECKSUM_FILE"; then
    log "[ERROR] Checksum file is invalid or empty, can't proceed without it!\n"
    exit 1
fi

echo "\n\n [WARNING] If you have ever used the DBKP boot image before or are currently using it,\n [NOTE] please flash the stock boot.img first before continuing (do NOT use DBKP boot).\n"

while true; do
    echo "\nChoose Which method you want to use:\n"
    echo " 1. Dualboot using Magnetic case/cover"
    echo " 2. Dualboot using Volume buttons"
    echo " 3. Exit script\n"
    echo -n " Enter your choice (1, 2 or 3): "
    read choice
    case "$choice" in
        1)
            echo "\nYou selected DualBoot usign Magnetic case/cover.\n\n"
            DBKP_METHOD=0
            echo "[INFO] When magnetic case is Closed, Windwos will start!"
            echo "[INFO] When magnetic case is Open, Android will start!\n"
            break
            ;;
        2)
            echo "\nYou selected DualBoot using Volume buttons.\n\n"
            DBKP_METHOD=1
            echo "[INFO] When any button is pressed after MI logo, Windows will start!"
            echo "[INFO] When None of the buttons is pressed, Android will start!\n"
            break
            ;;
        3)
            echo "Exiting."
            exit 0
            ;;
        *)
            echo "\nInvalid choice. Please try again.\n"
            ;;
    esac
done

# Loop until a valid option is chosen
while true; do
    echo "\nChoose a Boot Logo Option:\n"
    echo " 1. Aloha Inverted V, A Logo"
    echo " 2. Windows 11 White Square Logo"
    echo " 3. Windows 11 Gradient Rounded Logo"
    echo " 4. Nyanko Sensei (Madara) Logo"
    echo " 5. SirTorius M Logo"
    echo " 6. JadeKubPom Logo"
    echo " 7. Cambodia Porl Logo"
    echo " 8. Xiaomi Logo"
    echo " 9. MI Orange Logo"
    echo "10. MI White Logo"
    echo "11. WinDroid Logo"
    echo "12. Chara Dreemurr Logo"
    echo "13. Exit (btw will add more soon)\n"
    echo -n " Enter your choice (1 to 13): "
    read choice
    case "$choice" in
        1)
            echo "\nYou selected Aloha Inverted V, A Logo."
            download_uefi "$UEFI_ALOHA_SB"
            break
            ;;
        2)
            echo "\nYou selected Windows 11 White Square Logo."
            download_uefi "$UEFI_W11_WHITE_SB"
            break
            ;;
        3)
            echo "\nYou selected Windows 11 Gradient Rounded Logo."
            download_uefi "$UEFI_W11_GRADIENT_SB"
            break
            ;;
        4)
            echo "\nYou selected Nyanko Sensei (Madara) Logo."
            download_uefi "$UEFI_NYANKO_SENSEI_SB"
            break
            ;;
        5)
            echo "\nYou selected SirTorius M Logo."
            download_uefi "$UEFI_SIRTORIUS_M_SB"
            break
            ;;
        6)
            echo "\nYou selected JadeKubPom logo."
            download_uefi "$UEFI_JADEKUBPOM_SB"
            break
            ;;
        7)
            echo "\nYou selected Cambodia Porl Logo."
            download_uefi "$UEFI_CAMBODIA_PORL_SB"
            break
            ;;
        8)
            echo "\nYou selected Xiaomi Logo."
            download_uefi "$UEFI_XIAOMI_SB"
            break
            ;;
        9)
            echo "\nYou selected MI Orange Logo."
            download_uefi "$UEFI_MI_ORANGE_SB"
            break
            ;;
        10)
            echo "\nYou selected MI White Logo."
            download_uefi "$UEFI_MI_WHITE_SB"
            break
            ;;
        11)
            echo "\nYou selected WinDroid Logo."
            download_uefi "$UEFI_WINDROID_SB"
            break
            ;;
        12)
            echo "\nYou selected Chara Dreemurr Logo."
            download_uefi "$UEFI_CHARA_SB"
            break
            ;;
        13)
            echo "Exiting."
            exit 0
            ;;
        *)
            echo "\nInvalid choice. Please try again.\n"
            ;;
    esac
done

log "[INFO] Backing up boot.img..."
output=$($TARGET_BUSYBOX dd if="$TARGET_BOOT" of="$TARGET_DIR/boot.img" bs=8M 2>&1) || { log "[ERROR] Failed to dump boot image!"; exit 1; }
echo "$output" | $TARGET_BUSYBOX tail -n 1
$TARGET_BUSYBOX cp -f "$TARGET_DIR/boot.img" "/sdcard/boot_backup$(getprop ro.boot.slot_suffix).img"
log "[SUCCESS] Boot image backup completed."

log "[INFO] Unpacking boot.img..."
$TARGET_MAGISK_BOOT unpack -h "$TARGET_DIR/boot.img" || { log "[ERROR] Failed to unpack image!"; exit 1; }
log "[SUCCESS] Unpacking completed."

log "[INFO] Patching kernel..."
$TARGET_KP kernel $TARGET_UEFI patchedKernel $TARGET_DBKP_CFG $TARGET_SHELLCODE || { log "[ERROR] Kernel patching failed!"; exit 1; }
$TARGET_BUSYBOX mv patchedKernel kernel
log "[SUCCESS] Kernel patching completed."

log "[INFO] Repacking boot.img..."
$TARGET_MAGISK_BOOT repack "$TARGET_DIR/boot.img" || { log "[ERROR] Failed to repack boot image!"; exit 1; }
$TARGET_MAGISK_BOOT cleanup
log "[SUCCESS] Boot.img repacking completed."

log "[INFO] Flashing new patched boot image..."
$TARGET_BUSYBOX blockdev --setrw "$TARGET_BOOT"
output=$($TARGET_BUSYBOX dd if="$TARGET_DIR/new-boot.img" of="$TARGET_BOOT" bs=8M 2>&1) || { log "[ERROR] Failed to flash patched boot image!"; exit 1; }
echo "$output" | $TARGET_BUSYBOX tail -n 1
$TARGET_BUSYBOX cp -f "$TARGET_DIR/new-boot.img" "/sdcard/patched_boot.img"
log "[SUCCESS] Patched boot backup completed."

log "[INFO] Cleaning up temporary files..."
rm -rf "$TARGET_DIR"
log "[SUCCESS] Cleanup complete."

log "[COMPLETED] Dual Boot Kernel for Windows UEFI installed successfully!"

log "Do you want to reboot? (y/n)"
read -r answer
if [ "$answer" = "y" ]; then
    log "Rebooting now..."
    reboot
else
    log "Exiting..."
    exit 0
fi
